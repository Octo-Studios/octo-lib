plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.mod_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = "$rootProject.mod_name" + "-" + "$project.name".toUpperCase()
    }

    repositories {

    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
        }

        implementation 'org.yaml:snakeyaml:2.2'

        compileOnly 'org.projectlombok:lombok:1.18.32'
        annotationProcessor 'org.projectlombok:lombok:1.18.32'

        testCompileOnly 'org.projectlombok:lombok:1.18.32'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

        implementation 'org.jetbrains:annotations:20.1.0'
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    tasks.register('collectJars', Copy) {
        subprojects {
            def ignoredProjects = ['common'];

            if (!ignoredProjects.contains(project.name)) {
                def remapJar = project.tasks.named('remapJar')

                dependsOn remapJar
                from remapJar
                into 'build/libs'
            }
        }
    }

    assemble {
        dependsOn(collectJars)
    }
}
